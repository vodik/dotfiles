autoload -Uz add-zsh-hook
autoload -Uz vcs_info
autoload -Uz colors && colors
autoload -Uz compinit && compinit
autoload -Uz bashcompinit && bashcompinit
autoload zsh/terminfo

[[ ! -d ~/.cache/zsh ]] && mkdir -p ~/.cache/zsh
compinit -d ~/.cache/zsh/zcompdump

# smart urls
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# changing directories
setopt auto_cd \
  auto_pushd \
  cdable_vars \
  chase_links \
  pushd_ignore_dups \
  pushd_silent \
  pushd_to_home

# completion
setopt always_to_end \
  auto_menu \
  auto_name_dirs \
  auto_param_keys \
  auto_param_slash \
  auto_remove_slash \
  complete_aliases \
  complete_in_word \
  list_ambiguous \
  list_packed
unsetopt menu_complete

# expansion and globbing
setopt brace_ccl \
  extended_glob \
  long_list_jobs \
  multios \
  prompt_subst

# input/output
setopt correct \
  interactive_comments \
  rc_quotes \
  short_loops
unsetopt flowcontrol

# job control
setopt bg_nice

# zle
unsetopt beep

#history
setopt append_history \
  extended_history \
  hist_expire_dups_first \
  hist_ignore_dups \
  hist_ignore_space \
  hist_verify \
  inc_append_history \
  share_history

[[ -f ~/.dircolors ]] && source <(dircolors ~/.config/dircolors)

# vi editing mode
bindkey -v

bindkey "$terminfo[kdch1]" delete-char
bindkey -M vicmd "$terminfo[kdch1]" vi-delete-char

bindkey "$terminfo[kich1]" overwrite-mode
bindkey -M vicmd "$terminfo[kich1]" vi-insert

bindkey "$terminfo[khome]" vi-beginning-of-line
bindkey -M vicmd "$terminfo[khome]" vi-beginning-of-line

bindkey "$terminfo[kend]" vi-end-of-line
bindkey -M vicmd "$terminfo[kend]" vi-end-of-line

bindkey "$terminfo[kbs]" backward-delete-char
bindkey -M vicmd "$terminfo[kbs]" backward-char

bindkey '^H' backward-delete-char
bindkey -M vicmd '^H' backward-char

bindkey "$terminfo[kpp]" beginning-of-buffer-or-history
bindkey -M vicmd "$terminfo[kpp]" beginning-of-buffer-or-history
bindkey -M vicmd '^B' beginning-of-buffer-or-history

bindkey "$terminfo[knp]" end-of-buffer-or-history
bindkey -M vicmd "$terminfo[knp]" end-of-buffer-or-history
bindkey -M vicmd '^F' end-of-buffer-or-history

bindkey "$terminfo[kcuu1]" history-beginning-search-backward
bindkey -M vicmd "$terminfo[kcuu1]" history-beginning-search-backward

bindkey "$terminfo[kcud1]" history-beginning-search-forward
bindkey -M vicmd "$terminfo[kcud1]" history-beginning-search-forward

bindkey "$terminfo[kcub1]" backward-char
bindkey -M vicmd "$terminfo[kcub1]" backward-char

bindkey "$terminfo[kcuf1]" forward-char
bindkey -M vicmd "$terminfo[kcuf1]" forward-char

# shift-tab
if [[ -n $terminfo[kcbt] ]]; then
  bindkey "$terminfo[kcbt]" reverse-menu-complete
fi

# shift-left
if [[ -n $terminfo[kLFT] ]]; then
  bindkey "$terminfo[kLFT]" vi-backward-word
  bindkey -M vicmd "$terminfo[kLFT]" vi-backward-word
fi

# shift-right
if [[ -n $terminfo[kRIT] ]]; then
  bindkey "$terminfo[kRIT]" vi-forward-word
  bindkey -M vicmd "$terminfo[kRIT]" vi-forward-word
fi

# ctrl-left
if [[ -n $terminfo[kcub1] ]]; then
  bindkey '^[[1;5D' vi-backward-blank-word
fi

# ctrl-right
if [[ -n $terminfo[kcuf1] ]]; then
  bindkey '^[[1;5C' vi-forward-blank-word
fi

bindkey ' ' magic-space
bindkey '^i' expand-or-complete-prefix
bindkey '^W' backward-kill-word
bindkey '^w' push-line
bindkey '^e' get-line

bindkey -M vicmd 'h' backward-char
bindkey -M vicmd 'l' forward-char
bindkey -M vicmd '^R' redo
bindkey -M vicmd 'u' undo
bindkey -M vicmd 'ga' what-cursor-position
bindkey -M vicmd 'v' edit-command-line

# fancy <C-z>
# bg on empty line, push-input on non-empty line
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line -w
  else
    zle push-input -w
    zle clear-screen -w
  fi
}
zle -N fancy-ctrl-z

bindkey '^Z' fancy-ctrl-z
bindkey -M vicmd '^Z' fancy-ctrl-z

_force_rehash() {
  (( CURRENT = 1 )) && rehash
  return 1
}

zstyle ':completion::complete:*' use-cache on

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu yes select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format '%B%F{green}>> %d (errors: %e)%f%b'
zstyle ':completion:*:descriptions' format '%B%F{magenta}>> %d%f%b'
zstyle ':completion:*:messages' format '%B%F{cyan}>> %d%f%b'
zstyle ':completion:*:warnings' format '%B%F{red}>> no matches found%f%b'
zstyle ':completion:*:default' list-prompt '%B%S%M matches%s%b'
zstyle ':completion:*' format '%B%F{cyan}>> %d%f%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' completer _oldlist _expand _force_rehash _complete _match _approximate
zstyle ':completion:*' menu select=2

zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# vim zstyle
zstyle ':completion:*:*:(vim|nvim|emacs):*:*files' ignored-patterns '*~|*.(old|bak|o|hi)'
zstyle ':completion:*:*:(vim|nvim|emacs):*:*files' file-sort modification
zstyle ':completion:*:*:(vim|nvim|emacs):*' file-sort modification
zstyle ':completion:*:*:(vim|nvim|emacs):*' tag-order files

# kill zstyle
zstyle ':completion:*:*:kill:*' command 'ps -e -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:kill:*' insert-ids single

# man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# ssh/scp/rsync
zstyle ':completion:*:(scp|rsync):*' tag-order 'hosts:-host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' group-order files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order 'hosts:-host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:ssh:*' group-order hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*.*' loopback localhost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^*.*' '*@*'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^<->.<->.<->.<->' '127.0.0.<->'

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' actionformats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '

if hash just 2>/dev/null; then
    _just_completion() {
        [[ -f justfile ]] && reply=($(just --summary))
    }
    compctl -K _just_completion just
fi

[[ $TERM == xterm ]] && export TERM=xterm-256color
case $TERM in
  alacritty|foot|vte*|xterm*)
    function precmd {
      print -Pn '\e]2;%n@%m %~\a\e]133;A\e\\'
    }

    function preexec {
      local cmd=${1[(wr)^(*=*|sudo|ssh|-*)]}
      print -Pn "\e]2;$cmd:q\a"
    }
    ;;
esac

if [[ $INSIDE_EMACS = vterm ]]; then
  function vterm_cmd {
    printf "\e]51;E"
    local r
    while [[ $# -gt 0 ]]; do
      r="${1//\\/\\\\}"
      r="${r//\"/\\\"}"
      printf '"%s" ' "$r"
      shift
    done
    printf "\e\\"
  }

  function find_file {
    vterm_cmd find-file "$(realpath "$@")"
  }

  function clear {
    vterm_cmd vterm-clear-scrollback
    tput clear
  }
fi

function zle-line-init zle-keymap-select {
  vimode="${${KEYMAP/vicmd/c}/(main|viins)/i}"
  zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select

# make zsh/terminfo work for terms with application and cursor modes
case $TERM in
  alacritty|foot|vte*|xterm*)
    zle-line-init() { zle-keymap-select; echoti smkx }
    zle-line-finish() { echoti rmkx }
    zle -N zle-line-init
    zle -N zle-line-finish
    ;;
esac

function vcs_info_wrapper {
  vcs_info
  [[ -n "$vcs_info_msg_0_" ]] && echo " %{$fg[grey]%}${vcs_info_msg_0_/ /}%{$reset_color%}"
}

PROMPT="%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg[yellow]%}%1~%{$reset_color%}"'$(vcs_info_wrapper) $ '

alias ls='ls -FNh --tabsize=0 --color=auto --show-control-chars --group-directories-first'
alias ll='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias tree='tree -C'
alias grep='grep --color=auto'
alias ip='ip -c'

source <(mise activate zsh)
